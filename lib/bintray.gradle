apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

publishing {
    publications {
        Publication(MavenPublication) {
            artifact("$buildDir/outputs/aar/lib-release.aar")
            groupId 'co.infinum'
            artifact sourcesJar
            artifact javadocsJar
            artifactId 'goldfinger'
            version versions.goldfinger

            pom.withXml {
                def root = asNode()
                def dependenciesNode = root.appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publish = true
    publications = ['Publication']

    pkg {
        repo = 'android'
        name = 'goldfinger'
        userOrg = 'infinum'
        publicDownloadNumbers = true

        version {
            name = versions.goldfinger
        }
    }
}

task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = 'javadoc'
    from javadocs.destinationDir
}

task sourcesJar(type: Jar, dependsOn: assemble) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

task generateReadme {
    doFirst {
        def readmeFile = new File("${project.rootDir}/README.md")
        def content = readmeFile.text
        content = content.replaceAll("'co\\.infinum\\:goldfinger\\:.+?'", "'co.infinum:goldfinger:${versions.goldfinger}'")
        readmeFile.setText(content)
    }
}

preBuild.dependsOn ':lib:generateReadme'